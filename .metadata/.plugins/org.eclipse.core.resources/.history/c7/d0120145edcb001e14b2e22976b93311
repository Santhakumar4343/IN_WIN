package com.os.inwin.controller;

import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.os.inwin.entity.User;
import com.os.inwin.serviceImpl.UserServiceImpl;

@RestController
@RequestMapping("/api/users")
public class UserController {
   @Autowired
	private UserServiceImpl userService;
  
  @PostMapping("/save")
  public ResponseEntity<String> createUser(@RequestBody User user){
	  
//	  if(user!=null) {
//		  userService.createUser(user);
//	  return new ResponseEntity<>("user create successfully",HttpStatus.CREATED);
//	  }
//	  else {
//		  return new ResponseEntity<>("user cant be null",HttpStatus.BAD_REQUEST);
//	  }  
	   
	    String otp = userService.generateOtpAndSendEmail(user);
	    
	  
	    return ResponseEntity.ok("OTP sent successfully: " + otp);

  }
  
  
  @PostMapping("/verify-otp")
  public ResponseEntity<String> verifyOtpEndpoint(@RequestParam String otp) {
      // Call the verifyOtp method with the entered OTP
      ResponseEntity<String> otpVerificationResult = userService.verifyOtp(otp);
      
      // Return the result of OTP verification
      return otpVerificationResult;
  }

  
  
  @GetMapping("/getUser/{id}")
  public ResponseEntity<User> getUserById(@PathVariable long id){
	  User user=userService.getUser(id);
	  if(user!=null) {
		  return new ResponseEntity<>(userService.getUser(id),HttpStatus.OK);
	  }
	  else 
		  return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	  
  }
  
  @GetMapping("/getAllUsers")
  public ResponseEntity<List<User>> getAllUsers(){
	  
	  List<User> users=userService.getAllUser();
	  if(users!=null) {
		  return new ResponseEntity<>(users,HttpStatus.OK);
		  
	  }
	  else
	  {
		  return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	  }
  }
  @PutMapping("/updateUser/{id}")
  public ResponseEntity<String> updateUser(@PathVariable long id,@RequestBody User user){
	     User updateUser=userService.UpdateUser(id, user);
	     
	     return updateUser!=null ? new ResponseEntity<>("User Updated Successfully",HttpStatus.OK): new ResponseEntity<>(HttpStatus.BAD_REQUEST);
  }
  
  
  
  
  @DeleteMapping("/delete/{id}")
  public ResponseEntity<String> deleteUser(@PathVariable Long id) {
      try {
          userService.deleteUser(id);
          return new ResponseEntity<>("User deleted successfully", HttpStatus.OK);
      } catch (NoSuchElementException e) {
          return new ResponseEntity<>("User not found: " + e.getMessage(), HttpStatus.NOT_FOUND);
      } catch (Exception e) {
          return new ResponseEntity<>("Error deleting user: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
      }
  }
}

