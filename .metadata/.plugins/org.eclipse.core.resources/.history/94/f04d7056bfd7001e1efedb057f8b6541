package com.os.inwin.serviceImpl;

import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.os.inwin.entity.Gold;
import com.os.inwin.goldapi.GoldPriceResponse;
import com.os.inwin.repository.GoldRepository;
import com.os.inwin.service.GoldService;

@Service
public class GoldServiceImpl implements GoldService{

	
	@Autowired
	private GoldRepository goldRepository;
	
	
	@Override
	public List<Gold> getAllGolds() {
		
		return goldRepository.findAll();
	}

	@Override
	public Gold saveGold(Gold gold) {
		gold.setLastUpdateDate(LocalDate.now());
	        return  goldRepository.save(gold);
	}

	@Override
	public void updateGoldPrices() {	
	}

	@Override
	public List<Gold> getGoldByUserName(String userName) {
		
		return goldRepository.findByUserName(userName);
	}

	@Override
	public Gold updateGold(Long id, Gold gold) {
		 Optional<Gold> optionalGold = goldRepository.findById(id);
		    if (optionalGold.isPresent()) {
		        Gold existingGold= optionalGold.get();
		        existingGold.setName(gold.getName());
		        existingGold.setQuantity(gold.getQuantity());
		        existingGold.setBuyDate(gold.getBuyDate());
		        existingGold.setPurchasePrice(gold.getPurchasePrice());
		        existingGold.setSymbol(gold.getSymbol());
		        return goldRepository.save(existingGold);
		    }
		    return null;
	}

	@Override
	public boolean deleteGold(long id) {
		 Optional<Gold> optionalGold= goldRepository.findById(id);
		    if (optionalGold.isPresent()) {
		    	goldRepository.deleteById(id);
		        return true; 
		    } else {
		        return false; 
		    }
	}
	 public GoldPriceResponse getGoldPricePerGramInHyderabad() {
	        String url = "http://www.goldpriceindia.com/gold-price-hyderabad.php";
	        try {
	            // Fetch the HTML content of the URL
	            Document doc = Jsoup.connect(url).get();
	            // Extract the table containing gold prices
	            Element table = doc.select("table").get(0); // Assuming the first table on the page contains the prices
	            // Extract the rows of the table
	            Elements rows = table.select("tr");
	            // Find the rows containing the gold prices per gram for 24K and 22K
	            Element row24K = null;
	            Element row22K = null;
	            for (Element row : rows) {
	                if (row.text().contains("1 gram")) {
	                    Elements columns = row.select("td");
	                    if (columns.size() >= 3) {
	                        row24K = row;
	                        row22K = rows.get(rows.indexOf(row) + 1); // Assuming 22K price is in the next row
	                        break;
	                    }
	                }
	            }
	            // Ensure the rows are found
	            if (row24K == null || row22K == null) {
	                throw new RuntimeException("Rows containing gold prices not found.");
	            }
	            // Extract the prices from the second column (index 1) for 24K and 22K
	            double price24K = parsePrice(row24K.select("td").get(1).text());
	            double price22K = parsePrice(row22K.select("td").get(1).text());
	            // Create a GoldPriceResponse object
	            return new GoldPriceResponse(price24K, price22K);
	        } catch (IOException e) {
	            throw new RuntimeException("Error fetching gold price", e);
	        }
	    }

	    private double parsePrice(String priceString) {
	        String cleanPrice = priceString.replaceAll("[^\\d.]+", "");
	        return Double.parseDouble(cleanPrice);
	    }

	
}
